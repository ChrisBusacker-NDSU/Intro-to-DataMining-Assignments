#By: Chris Busacker

import numpy as np
import random
import time
from scipy.stats import norm
from numpy import mean
from numpy import std
from numpy import pi
from numpy import sqrt
from numpy import exp

trainingFile = "irisTraining.txt"
testingFile = "irisTesting.txt"
Xtrain = np.loadtxt(trainingFile)
n = Xtrain.shape[0]
d = Xtrain.shape[1]-1
print (n, d)
#Training... Collect mean and standard deviation for each dimension for each class..
#Also, calculate P(C+) and P(C-)
zero = Xtrain[:,0]
one = Xtrain[:,1]
two = Xtrain[:,2]
three = Xtrain[:,3]
classif = Xtrain[:,4]
i = 0
temp = []
d0n = []
d1n = []
d2n = []
d3n = []
d4n = []
d0p = []
d1p = []
d2p = []
d3p = []
d4p = []
cp = 0
cn = 0

for i in range(0,len(classif)):
    num = int(classif[i])
    if num == -1:
        d0n.append(zero[i])
        d1n.append(one[i])
        d2n.append(two[i])
        d3n.append(three[i])
        d4n.append(classif[i])
        cn += 1
    elif num == 1:
        d0p.append(zero[i])
        d1p.append(one[i])
        d2p.append(two[i])
        d3p.append(three[i])
        d4p.append(classif[i])
        cp += 1

calCp = cp/n
calCn = cn/n
print(calCp)
print(calCn)

d1nm = mean(d0n)
d2nm = mean(d1n)
d3nm = mean(d2n)
d4nm = mean(d3n)
d1pm = mean(d0p)
d2pm = mean(d1p)
d3pm = mean(d2p)
d4pm = mean(d3p)

d1ns = std(d0n)
d2ns = std(d1n)
d3ns = std(d2n)
d4ns = std(d3n)
d1ps = std(d0p)
d2ps = std(d1p)
d3ps = std(d2p)
d4ps = std(d3p)
  
        
#Testing .....
Xtest = np.loadtxt(testingFile)
nn = Xtest.shape[0] # Number of points in the testing data.
print(nn)

tp = 0 #True Positive
fp = 0 #False Positive
tn = 0 #True Negative
fn = 0 #False Negative

test0 = Xtest[:,0]
test1 = Xtest[:,1]
test2 = Xtest[:,2]
test3 = Xtest[:,3]
test4 = Xtest[:,4]

def cal_prob(x, mean, stdev):
    exponent = exp(-((x-mean)**2/(2*stdev**2)))
    return (1/(sqrt(2*pi)*stdev))*exponent
c1 = 0
c2 = 0
c3 = 0
c4 = 0
CPF = 0
CNF = 0
#Iterate over all points in testing data
  #For each point find the P(C+|Xi) and P(C-|Xi) and decide if the point belongs to C+ or C-..
  #Recall we need to calculate P(Xi|C+)*P(C+) ..
  #P(Xi|C+) = P(Xi1|C+) * P(Xi2|C+)....P(Xid|C+)....Do the same for P(Xi|C-)
  #Now that you've calculate P(Xi|C+) and P(Xi|C-), we can decide which is higher 
  #P(Xi|C-)*P(C-) or P(Xi|C-)*P(C-) ..
  #increment TP,FP,FN,TN accordingly, remember the true lable for the ith point is in Xtest[i,d]

#}

#Calculate all the measures required..

for i in range(0,nn):
    #calculating P(X|Ci) for positive and negative
    c1 = cal_prob(test0[i],d1pm,d1ps)
    c2 = cal_prob(test1[i],d2pm,d2ps)
    c3 = cal_prob(test2[i],d3pm,d3ps)
    c4 = cal_prob(test3[i],d4pm,d4ps)
    CPF = c1*c2*c3*c4
    c1 = cal_prob(test0[i],d1nm,d1ns)
    c2 = cal_prob(test1[i],d2nm,d2ns)
    c3 = cal_prob(test2[i],d3nm,d3ns)
    c4 = cal_prob(test3[i],d4nm,d4ns)
    CNF = c1*c2*c3*c4
    #calculating P(X|Ci)*P(Ci) for both
    CPF = CPF*calCp
    CNF = CNF*calCn

    if(CPF>CNF):
        if(test4[i] == 1):
            tp += 1
        else:
            fp += 1
    elif CNF>CPF:
        if(test4[i] == -1):
            tn += 1
        else:
            fn += 1

    
Accuracy = ((tp+tn)/(tp+fp+tn+fn))
Recall = tp/(tp+fn)
Precision = tp/(tp+fp)    

print("The Accuracy:",Accuracy)
print("The True Positives:",tp)
print("The False Positives:",fp)
print("The True Negatives:",tn)
print("The False Negatives:",fn)
print("The Precision:",Precision)
print("The Recall:",Recall)
