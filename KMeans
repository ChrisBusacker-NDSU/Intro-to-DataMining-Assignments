#Kmeans code
#By: Christopher Busacker

import matplotlib.pyplot as plt
from matplotlib import style
style.use('ggplot')
from sklearn.cluster import KMeans
import numpy as np
import random

fourCircles= "fourCircles.txt"
iris = "iris.txt"
fourEight = "t4.8k.txt"
twoCircle = "twoCircles.txt"
twoEllipses = "twoEllipses.txt"

Xfour = np.loadtxt(fourCircles)
Xiris = np.loadtxt(iris)
Xeight = np.loadtxt(fourEight)
Xcircle = np.loadtxt(twoCircle)
Xellipses = np.loadtxt(twoEllipses)

colors = 10*["g","r","c","b","k","m","tan","olive","rebeccapurple"]


#plt.scatter(Xellipses[:,0], Xellipses[:,1], s=10)
#plt.show()

#set the number of clusters with k here
class K_Means:
    def __init__(self, k=4, tol=0.001, max_iter=300):
        self.k = k
        self.tol = tol
        self.max_iter = max_iter

    def fit(self,data):
        count = 0
        self.cents = {}

        for i in range(self.k):
            self.cents[i] = data[i]

        for i in range(self.max_iter):
            self.classifs = {}

            for i in range(self.k):
                self.classifs[i] = []
            number = 0
            listNums = ""
            for featureset in data:
                distances = [np.linalg.norm(featureset-self.cents[cent]) for cent in self.cents]
                classif = distances.index(min(distances))
                number = classif
                self.classifs[classif].append(featureset)
                listNums += ","
                listNums += str(number)

            prev_cents = dict(self.cents)

            for classif in self.classifs:
                self.cents[classif] = np.average(self.classifs[classif],axis=0)

            optimized = True

            for c in self.cents:
                original_cent = prev_cents[c]
                current_cent = self.cents[c]
                if np.sum((current_cent-original_cent)/original_cent*100.0) > self.tol:
                    print(np.sum((current_cent-original_cent)/original_cent*100.0))
                    optimized = False
                    count+=1

            if optimized:
                print("The final mean:",np.average(self.classifs[classif],axis=0))
                for i in range(self.k):
                    print ("Number of",str(i),":",listNums.count(str(i)))
                print(listNums)
                print("Number of interations:",count)
                print(np.sum((current_cent-original_cent)/original_cent*100.0))
                break

#The running of the Kmean            
clf = K_Means()
clf.fit(fourCircles)#place the np.loadtext data here.

for cent in clf.cents:
    plt.scatter(clf.cents[cent][0], clf.cents[cent][1],
                marker="o", color="k", s=20, linewidths=5)

for classif in clf.classifs:
    color = colors[classif]
    for featureset in clf.classifs[classif]:
        plt.scatter(featureset[0], featureset[1], marker="x", color=color, s=10, linewidths=5)
        
plt.show()
