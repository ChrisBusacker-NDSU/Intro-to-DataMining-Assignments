#by: Christopher Busacker

import matplotlib.pyplot as plt
import numpy
import random
import time
from collections import defaultdict

#filename = "networkDatasets/toyN.txt"
#filename = "toyN.txt"
filename = "karate.txt"
#filename = "HcNetwork.txt"
#filename = "HprdNetwork.txt"
X = numpy.loadtxt(filename)
n = max(max(X[:,0]),max(X[:,1]))
A = numpy.zeros((int(n),int(n)))
#remember python index the entries from 0 to n-1.
#populate A..iterate over X and populate entries in A
#Then calculate measures..

V = X[:,0]
E = X[:,1]

i = 0
for i in range(0,len(V)):
    A[int(V[i])-1,int(E[i])-1] = 1
for i in range(0,len(E)):
    A[int(E[i])-1,int(V[i])-1] = 1
        

js = 0
kj = []
kjs = []
for i in range(0,int(n)):
    js = 0
    for j in range(0,int(n)):
        num = 0
        num = A[i,j]
        if num == 1:
            js += 1
    kj.append(js)
    kjs.append(0)

val = 0

for i in range(0,int(n)):
    val = kj[i]
    kjs[val-1] += 1

Pj = []

for i in range(0,len(kjs)):
    prob = 0
    prob = (kjs[i] / int(n))
    Pj.append(prob)


xVal = []
for i in range(0,int(n)):
    xVal.append(i+1)

x1 = xVal
y1 = kjs

plt.scatter(x1,y1)
plt.show()

fig = plt.figure()
ax = plt.gca()
ax.plot(xVal ,Pj, 'o', c='blue', alpha=5, markeredgecolor='none')
ax.set_yscale('log')
ax.set_xscale('log')
plt.show()

G = {}

def makelink(G, node1, node2):
    if node1 not in G: G[node1] = defaultdict(int)
    (G[node1])[node2] += 1
    if node2 not in G: G[node2] = defaultdict(int)
    (G[node2])[node1] += 1
    return G


for (x,y) in X: makelink(G,x,y)

def cluster_coef(G,v):
    neighbors = G[v].keys()
    if len(neighbors) == 1: return 0.0
    links = 0.0
    for w in neighbors:
        for u in neighbors:
            if u in G[w]: links += 0.5
    return 2.0*links/(len(neighbors)*(len(neighbors)-1))


total = 0
for v in G.keys():
    cc = cluster_coef(G,v)
    total += cc
    
print(total/len(G))
